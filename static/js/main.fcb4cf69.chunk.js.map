{"version":3,"sources":["logo.svg","Components/ObjectProperties.jsx","Components/ObjectPropertiesPartials/ButtonInfo.jsx","Components/Root.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","ComponentWrapper","BUTTON","style","width","padding","color","margin","Component","ObjectProperties","information","this","props","VisibleInfo","type","Root","Fragment","height","backgroundColor","flex","boxShadow","zIndex","paddingTop","id","App","className","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"2JAAAA,EAAOC,QAAU,IAA0B,kC,+JCGrCC,EAAmB,CACrBC,O,iLCGI,OAAO,kBAAC,MAAD,CAAKC,MAAO,CAACC,MAAM,SACtB,kBAAC,SAAD,KACI,kBAAC,MAAD,CAAKD,MAAO,CAACE,QAAS,KAClB,wBAAIF,MAAO,CAACG,MAAO,QAASC,OAAQ,IAApC,qB,GANKC,cDiBVC,E,iLAZF,IAEDC,EACAC,KAAKC,MADLF,YAEAG,EAAcZ,EAAiBS,EAAYI,MAC/C,OAAO,6BAEC,kBAACD,EAAD,W,GAReL,aE6ChBO,E,iLA7CX,OACE,kBAAC,IAAMC,SAAP,KACE,kBAAC,MAAD,MAOA,kBAAC,MAAD,CAAKb,MAAO,CAAEc,OAAQ,UAAWC,gBAAiB,YAChD,kBAAC,SAAD,CACEC,KAAM,EACNhB,MAAO,CACLe,gBAAiB,OACjBE,UAAW,+BACXC,OAAQ,KAKZ,kBAAC,SAAD,CACEF,KAAM,EACNhB,MAAO,CAAEe,gBAAiB,QAAQX,OAAO,GAAKc,OAAQ,EAAGC,WAAY,KAGrE,yBAAKC,GAAG,8BAIV,kBAAC,SAAD,CACEJ,KAAM,EACNhB,MAAO,CACLe,gBAAiB,OACjBE,UAAW,wBACXC,OAAQ,IAGV,kBAAC,EAAD,CAAkBX,YAAa,CAACI,KAAK,mB,GAvC9BN,aCOJgB,MARf,WACE,OACE,yBAAKC,UAAU,OACb,kBAAC,EAAD,QCIcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.fcb4cf69.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react';\r\nimport ButtonInfo from './ObjectPropertiesPartials/ButtonInfo';\r\n\r\nconst ComponentWrapper = {\r\n    BUTTON: ButtonInfo\r\n}\r\n\r\n\r\nclass ObjectProperties extends Component{\r\n    render(){\r\n        let {\r\n            information\r\n        } = this.props;\r\n        let VisibleInfo = ComponentWrapper[information.type];\r\n        return <div>\r\n            {\r\n                <VisibleInfo />\r\n            }\r\n        </div>\r\n    }\r\n}\r\nexport default ObjectProperties;","import React, { Component } from 'react';\r\nimport { Row, Column } from \"simple-flexbox\";\r\n\r\n\r\nclass ButtonInfo extends Component{\r\n\r\n    render(){\r\n        return <Row style={{width:\"100%\"}}>\r\n            <Column>\r\n                <Row style={{padding: 16}}>\r\n                    <h5 style={{color: \"white\", margin: 0}}>Properties</h5>\r\n                </Row>\r\n            </Column>\r\n        </Row>\r\n    }\r\n}\r\n\r\nexport default ButtonInfo;","import React, { Component } from \"react\";\r\nimport { Row, Column } from \"simple-flexbox\";\r\nimport AppBar from \"@material-ui/core/AppBar\";\r\nimport Toolbar from \"@material-ui/core/Toolbar\";\r\nimport ObjectProperties from \"./ObjectProperties\";\r\n\r\nclass Root extends Component {\r\n  render() {\r\n    return (\r\n      <React.Fragment>\r\n        <Row>\r\n          {/*<AppBar position=\"static\">\r\n            <Toolbar>\r\n             \r\n            </Toolbar>\r\n            </AppBar>*/}\r\n        </Row>\r\n        <Row style={{ height: \"inherit\", backgroundColor: \"#5c5c5c\" }}>\r\n          <Column\r\n            flex={1}\r\n            style={{\r\n              backgroundColor: \"grey\",\r\n              boxShadow: \"rgb(74, 74, 74) 5px 1px 14px\",\r\n              zIndex: 1\r\n            }}\r\n          >\r\n            \r\n          </Column>\r\n          <Column\r\n            flex={3}\r\n            style={{ backgroundColor: \"white\",margin:16,  zIndex: 0, paddingTop: 32 }}\r\n          >\r\n        \r\n            <div id=\"root-component-container\">\r\n            \r\n            </div>\r\n          </Column>\r\n          <Column\r\n            flex={1}\r\n            style={{\r\n              backgroundColor: \"grey\",\r\n              boxShadow: \"-3px 1px 14px #4a4a4a\",\r\n              zIndex: 1\r\n            }}\r\n          >\r\n            <ObjectProperties information={{type:\"BUTTON\"}}/>\r\n          </Column>\r\n        </Row>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Root;\r\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Root from './Components/Root';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Root />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}